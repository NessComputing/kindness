#!/usr/bin/env bash

shopt -s extglob
set -o errtrace
set -o errexit

log()  { printf "%b\n" "$*" ; return $? ; }
fail() { log "\nError: $*\n" ; exit 1 ; }

PLATFORM=$(uname)
RUBY_RELEASE='p429'
RUBY_VERSION="ruby-1.9.3-$RUBY_RELEASE"

usage()
{
  printf "%b" "
Usage:

  kindness-install [options] [action]

Options

  [--]branch    <name> - Install kindness head, from named branch
  --trace              - used to debug the installer script

Actions

  master - Install kindness master branch from seryl kindness repo (Default).
  stable - Install kindness stable branch from seryl kindness repo.
  help   - Display CLI help (this output)

"
}

check_if_root()
{
  if [[ $USER == "root" ]]; then
    log "kindness is not meant to be installed with the root user or sudo"
    exit 0
  fi
}

check_for_xcode_clitools()
{
  if [[ $PLATFORM == 'Darwin' ]]; then
    GCC_LOCATION=$(which gcc) || $(cat /dev/null)
    if [[ -z $GCC_LOCATION ]]; then
      log "Xcode CLI tools are not installed"
      install_xcode_clitools
    fi
  fi
}

install_xcode_clitools()
{
  log "Installing Xcode CLI tools"
  OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

  TOOLS=clitools.dmg
  if [[ "$OSX_VERS" -eq 7 ]]; then
    DMGURL=http://devimages.apple.com/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
  elif [[ "$OSX_VERS" -eq 8 ]]; then
    DMGURL=http://devimages.apple.com/downloads/xcode/command_line_tools_for_xcode_os_x_mountain_lion_april_2013.dmg
  fi

  curl -sL "$DMGURL" -o "$TOOLS"
  TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
  hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
  installer -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
  hditil detatch "$TMPMOUNT"
  rm -rf "$TMPMOUNT"
  rm "$TOOLS"
}

check_gem_installed()
{
  gem_installed=$(gem list | grep $1 | awk '{ print $1 }')
}

install_brew()
{
  BREW_LOCATION=$(which brew) || $(cat /dev/null)
  if [[ $PLATFORM == 'Darwin' ]] && [ -z $BREW_LOCATION ]; then
    log 'Downloading Homebrew'
    echo ''| /usr/bin/ruby <(curl -fsSkL raw.github.com/mxcl/homebrew/go)
  fi
  log 'Updating Homebrew'
  brew update | grep -v 'stty: stdin'
}

install_automake()
{
  for app in automake autoconf
  do
    if [[ -z $(brew list | grep $app) ]]; then
      log "Installing $app"
      brew install $app > /dev/null 2>&1
    fi
  done
}

install_git()
{
  GIT_LOCATION=$(which git) || $(cat /dev/null)
  if [[ -z $GIT_LOCATION ]]; then
    log 'Downloading Git'
    
    if [[ $PLATFORM == 'Darwin' ]]; then
      brew install git
    elif [[ -f /etc/redhat-release ]]; then
      sudo yum install -y git
    elif [[ -f /etc/debian_version ]]; then
      sudo aptitude install -y git
    elif [[ -f /etc/mandrake-release ]]; then
      sudo urpmi install -y git
    elif [[ -f /etc/SuSE-release ]]; then
      sudo zipper install -y git
    fi
  fi
}

install_rvm()
{
  CURRENT_RVM=$(rvm --version 2> /dev/null| awk '{print $2}' | sed '/^$/d') || $(cat /dev/null)  
  RVM_VERSION=$(curl -sL https://raw.github.com/wayneeseguin/rvm/master/VERSION)
  if [[ $RVM_VERSION != $CURRENT_RVM ]]; then
    curl -sL https://get.rvm.io | bash -s stable --autolibs=3 --ruby=$RUBY_VERSION
  fi
  
  RVM_STRING="[[ -s \"\$HOME/.rvm/scripts/rvm\" ]] && . \"\$HOME/.rvm/scripts/rvm\""
  RVM_PATH='PATH=$PATH:$HOME/.rvm/bin'
  
  BASH_RVM_SHELL_RC="$HOME/.bash_profile"
  case $SHELL in
    *zsh)
      RVM_SHELL_RC="$HOME/.zshrc"
      ;;
  esac
  
  for path in $RVM_SHELL_RC $BASH_RVM_SHELL_RC
  do
    if [[ -z $(cat $path | grep rvm | awk '{ print $1 }') ]]; then
      log 'Setting up rvm profile'
      echo "$RVM_STRING # Load rvm function" >> $path
      echo "$RVM_PATH # Add rvm to PATH" >> $path
      echo "" >> $path
      source $path
    fi
  done
  
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function
  PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
  . $HOME/.rvm/scripts/rvm
  rvm reload
}

install_ruby19()
{
  RUBY_INSTALLED=$(rvm list | grep $RUBY_VERSION | awk '{ print $2 }')
  if [[ -z $RUBY_INSTALLED ]]; then
    log 'Downloading Ruby19'
    echo "gem: --no-ri --no-rdoc" > ~/.gemrc
    rvm install $RUBY_VERSION
  fi
  
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function
  PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
  
  RUBY_IS_DEFAULT=$(rvm list | grep "=\\* $RUBY_VERSION" | awk '{ print $2 }')
  if [[ -z $RUBY_IS_DEFAULT ]]; then
    log "Setting rvm default to $RUBY_VERSION"
    rvm use --default $RUBY_VERSION
  fi
}

install_chef()
{
  check_gem_installed "chef"
  if [[ -z $gem_installed ]]; then
    log 'Downloading Chef'
    gem install chef
  fi
}

install_kindness()
{
  check_gem_installed "simplecov"
  if [[ -z $gem_installed ]]; then
    log 'Downloading simplecov'
    gem install simplecov
  fi
  
  if [[ ! -d $HOME/.kindness ]]; then
    log "Installing kindness"
    cd $HOME && git clone https://github.com/seryl/kindness.git .kindness
  else
    log "Updating kindness"
    cd $HOME/.kindness && git pull
  fi
  
  case $SHELL in
    *bash)
      RVM_SHELL_RC="$HOME/.bash_profile"
      ;;
    *zsh)
      RVM_SHELL_RC="$HOME/.zshrc"
      ;;
  esac

  KINDNESS_PATH='PATH=$PATH:$HOME/.kindness/bin'
  if [[ -z $(cat $RVM_SHELL_RC | grep kindness | awk '{ print $1 }') ]]; then
    echo "$KINDNESS_PATH # Add kindness to PATH" >> $RVM_SHELL_RC
    echo "" >> $RVM_SHELL_RC
    source $RVM_SHELL_RC
  fi
}

update_kindness()
{
  kindness update
  kindness

  log ""
  log "To run kindness: rvm must be sourced: (Mac users can just paste.)"
  log "    . $RVM_SHELL_RC; kindness"
  log ""

  if [[ $PLATFORM == 'Darwin' ]]; then
    echo "source $RVM_SHELL_RC; kindness update\n" | pbcopy
  fi
}

get_ready()
{
  check_if_root
  check_for_xcode_clitools
  install_brew
  install_automake
  install_git
  install_rvm
  install_ruby19
  install_chef
  install_kindness
  update_kindness
}

# Parse CLI arguments.
while (( $# > 0 ))
do
  token="$1"
  shift
  
  case "$token" in
    (--trace)
      set -o xtrace
      export kindness_trace_flag=1
      ;;
    (--debug)
      export kindness_debug_flag=1
      set -o verbose
      ;;
    (help|usage)
      usage
      exit 0
      ;;
    
    (*)
      echo "Unrecognized option: $token"
      usage
      exit 1
      ;;
  esac
done

get_ready
